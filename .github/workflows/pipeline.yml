name: CI-CD-Lobby

on:
  push:
    branches: [master]
  pull_request:
    branches: "**"

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: lobby
  ECS_SERVICE: ECS-SERVICE
  ECS_CLUSTER: ECS-CLUSTER
  ECS_TASK_DEFINITION: task-definition.json
  CONTAINER_NAME: lobby-app

jobs:
  lint:
    name: Linting code
    runs-on: ubuntu-latest

    steps:
      - name: Clone repo
        uses: actions/checkout@v2

      - name: Installing node
        uses: actions/setup-node@v2
        with:
          node-version: "14.x"

      - name: Running linters
        run: |
          npm i
          npm run lint
          npm run prettier

  deploy:
    name: Deploy to AWS ECS
    runs-on: ubuntu-latest
    environment: Dev
    needs: [lint]

    steps:
      - name: Prepare .env file
        run: |
          mv .env.sample .env
          sed -i "s~fake_string~${{ secrets.MONGODB_ATLAS_URI }}~" .env

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
